/* automatically generated by rust-bindgen 0.59.1 */
#![allow(warnings)]

pub const _UNISTD_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 34;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _POSIX_VERSION: u32 = 200809;
pub const __POSIX2_THIS_VERSION: u32 = 200809;
pub const _POSIX2_VERSION: u32 = 200809;
pub const _POSIX2_C_VERSION: u32 = 200809;
pub const _POSIX2_C_BIND: u32 = 200809;
pub const _POSIX2_C_DEV: u32 = 200809;
pub const _POSIX2_SW_DEV: u32 = 200809;
pub const _POSIX2_LOCALEDEF: u32 = 200809;
pub const _XOPEN_VERSION: u32 = 700;
pub const _XOPEN_XCU_VERSION: u32 = 4;
pub const _XOPEN_XPG2: u32 = 1;
pub const _XOPEN_XPG3: u32 = 1;
pub const _XOPEN_XPG4: u32 = 1;
pub const _XOPEN_UNIX: u32 = 1;
pub const _XOPEN_ENH_I18N: u32 = 1;
pub const _XOPEN_LEGACY: u32 = 1;
pub const _BITS_POSIX_OPT_H: u32 = 1;
pub const _POSIX_JOB_CONTROL: u32 = 1;
pub const _POSIX_SAVED_IDS: u32 = 1;
pub const _POSIX_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_SYNCHRONIZED_IO: u32 = 200809;
pub const _POSIX_FSYNC: u32 = 200809;
pub const _POSIX_MAPPED_FILES: u32 = 200809;
pub const _POSIX_MEMLOCK: u32 = 200809;
pub const _POSIX_MEMLOCK_RANGE: u32 = 200809;
pub const _POSIX_MEMORY_PROTECTION: u32 = 200809;
pub const _POSIX_CHOWN_RESTRICTED: u32 = 0;
pub const _POSIX_VDISABLE: u8 = 0u8;
pub const _POSIX_NO_TRUNC: u32 = 1;
pub const _XOPEN_REALTIME: u32 = 1;
pub const _XOPEN_REALTIME_THREADS: u32 = 1;
pub const _XOPEN_SHM: u32 = 1;
pub const _POSIX_THREADS: u32 = 200809;
pub const _POSIX_REENTRANT_FUNCTIONS: u32 = 1;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200809;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200809;
pub const _POSIX_THREAD_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_PRIO_PROTECT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_PROTECT: i32 = -1;
pub const _POSIX_SEMAPHORES: u32 = 200809;
pub const _POSIX_REALTIME_SIGNALS: u32 = 200809;
pub const _POSIX_ASYNCHRONOUS_IO: u32 = 200809;
pub const _POSIX_ASYNC_IO: u32 = 1;
pub const _LFS_ASYNCHRONOUS_IO: u32 = 1;
pub const _POSIX_PRIORITIZED_IO: u32 = 200809;
pub const _LFS64_ASYNCHRONOUS_IO: u32 = 1;
pub const _LFS_LARGEFILE: u32 = 1;
pub const _LFS64_LARGEFILE: u32 = 1;
pub const _LFS64_STDIO: u32 = 1;
pub const _POSIX_SHARED_MEMORY_OBJECTS: u32 = 200809;
pub const _POSIX_CPUTIME: u32 = 0;
pub const _POSIX_THREAD_CPUTIME: u32 = 0;
pub const _POSIX_REGEXP: u32 = 1;
pub const _POSIX_READER_WRITER_LOCKS: u32 = 200809;
pub const _POSIX_SHELL: u32 = 1;
pub const _POSIX_TIMEOUTS: u32 = 200809;
pub const _POSIX_SPIN_LOCKS: u32 = 200809;
pub const _POSIX_SPAWN: u32 = 200809;
pub const _POSIX_TIMERS: u32 = 200809;
pub const _POSIX_BARRIERS: u32 = 200809;
pub const _POSIX_MESSAGE_PASSING: u32 = 200809;
pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200809;
pub const _POSIX_MONOTONIC_CLOCK: u32 = 0;
pub const _POSIX_CLOCK_SELECTION: u32 = 200809;
pub const _POSIX_ADVISORY_INFO: u32 = 200809;
pub const _POSIX_IPV6: u32 = 200809;
pub const _POSIX_RAW_SOCKETS: u32 = 200809;
pub const _POSIX2_CHAR_TERM: u32 = 200809;
pub const _POSIX_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_TRACE: i32 = -1;
pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
pub const _POSIX_TRACE_INHERIT: i32 = -1;
pub const _POSIX_TRACE_LOG: i32 = -1;
pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX_V7_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V6_LPBIG_OFFBIG: i32 = -1;
pub const _XBS5_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V7_LP64_OFF64: u32 = 1;
pub const _POSIX_V6_LP64_OFF64: u32 = 1;
pub const _XBS5_LP64_OFF64: u32 = 1;
pub const __ILP32_OFF32_CFLAGS: &'static [u8; 5usize] = b"-m32\0";
pub const __ILP32_OFF32_LDFLAGS: &'static [u8; 5usize] = b"-m32\0";
pub const __ILP32_OFFBIG_CFLAGS: &'static [u8; 48usize] =
    b"-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64\0";
pub const __ILP32_OFFBIG_LDFLAGS: &'static [u8; 5usize] = b"-m32\0";
pub const __LP64_OFF64_CFLAGS: &'static [u8; 5usize] = b"-m64\0";
pub const __LP64_OFF64_LDFLAGS: &'static [u8; 5usize] = b"-m64\0";
pub const STDIN_FILENO: u32 = 0;
pub const STDOUT_FILENO: u32 = 1;
pub const STDERR_FILENO: u32 = 2;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const R_OK: u32 = 4;
pub const W_OK: u32 = 2;
pub const X_OK: u32 = 1;
pub const F_OK: u32 = 0;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const L_SET: u32 = 0;
pub const L_INCR: u32 = 1;
pub const L_XTND: u32 = 2;
pub const _GETOPT_POSIX_H: u32 = 1;
pub const _GETOPT_CORE_H: u32 = 1;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const _STDINT_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const _TIME_H: u32 = 1;
pub const _BITS_TIME_H: u32 = 1;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_TAI: u32 = 11;
pub const TIMER_ABSTIME: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __struct_tm_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const __clockid_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __itimerspec_defined: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const false_: u32 = 0;
pub const true_: u32 = 1;
pub const S7CpuStatusUnknown: u32 = 0;
pub const S7CpuStatusRun: u32 = 8;
pub const S7CpuStatusStop: u32 = 4;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type ssize_t = __ssize_t;
pub type size_t = ::std::os::raw::c_ulong;
pub type gid_t = __gid_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type useconds_t = __useconds_t;
pub type pid_t = __pid_t;
pub type socklen_t = __socklen_t;
extern "C" {
    pub fn access(
        __name: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn faccessat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lseek(
        __fd: ::std::os::raw::c_int,
        __offset: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> __off_t;
}
extern "C" {
    pub fn close(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn closefrom(__lowfd: ::std::os::raw::c_int);
}
extern "C" {
    pub fn read(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn write(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn pread(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: size_t,
        __offset: __off_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn pwrite(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: size_t,
        __offset: __off_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn pipe(__pipedes: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alarm(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sleep(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ualarm(__value: __useconds_t, __interval: __useconds_t) -> __useconds_t;
}
extern "C" {
    pub fn usleep(__useconds: __useconds_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pause() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chown(
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchown(
        __fd: ::std::os::raw::c_int,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lchown(
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchownat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchdir(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getcwd(
        __buf: *mut ::std::os::raw::c_char,
        __size: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getwd(__buf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dup(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup2(__fd: ::std::os::raw::c_int, __fd2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __environ: *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn execve(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fexecve(
        __fd: ::std::os::raw::c_int,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execv(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execle(
        __path: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execl(
        __path: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execvp(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execlp(
        __file: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nice(__inc: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _exit(__status: ::std::os::raw::c_int);
}
pub const _PC_LINK_MAX: ::std::os::raw::c_uint = 0;
pub const _PC_MAX_CANON: ::std::os::raw::c_uint = 1;
pub const _PC_MAX_INPUT: ::std::os::raw::c_uint = 2;
pub const _PC_NAME_MAX: ::std::os::raw::c_uint = 3;
pub const _PC_PATH_MAX: ::std::os::raw::c_uint = 4;
pub const _PC_PIPE_BUF: ::std::os::raw::c_uint = 5;
pub const _PC_CHOWN_RESTRICTED: ::std::os::raw::c_uint = 6;
pub const _PC_NO_TRUNC: ::std::os::raw::c_uint = 7;
pub const _PC_VDISABLE: ::std::os::raw::c_uint = 8;
pub const _PC_SYNC_IO: ::std::os::raw::c_uint = 9;
pub const _PC_ASYNC_IO: ::std::os::raw::c_uint = 10;
pub const _PC_PRIO_IO: ::std::os::raw::c_uint = 11;
pub const _PC_SOCK_MAXBUF: ::std::os::raw::c_uint = 12;
pub const _PC_FILESIZEBITS: ::std::os::raw::c_uint = 13;
pub const _PC_REC_INCR_XFER_SIZE: ::std::os::raw::c_uint = 14;
pub const _PC_REC_MAX_XFER_SIZE: ::std::os::raw::c_uint = 15;
pub const _PC_REC_MIN_XFER_SIZE: ::std::os::raw::c_uint = 16;
pub const _PC_REC_XFER_ALIGN: ::std::os::raw::c_uint = 17;
pub const _PC_ALLOC_SIZE_MIN: ::std::os::raw::c_uint = 18;
pub const _PC_SYMLINK_MAX: ::std::os::raw::c_uint = 19;
pub const _PC_2_SYMLINKS: ::std::os::raw::c_uint = 20;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub const _SC_ARG_MAX: ::std::os::raw::c_uint = 0;
pub const _SC_CHILD_MAX: ::std::os::raw::c_uint = 1;
pub const _SC_CLK_TCK: ::std::os::raw::c_uint = 2;
pub const _SC_NGROUPS_MAX: ::std::os::raw::c_uint = 3;
pub const _SC_OPEN_MAX: ::std::os::raw::c_uint = 4;
pub const _SC_STREAM_MAX: ::std::os::raw::c_uint = 5;
pub const _SC_TZNAME_MAX: ::std::os::raw::c_uint = 6;
pub const _SC_JOB_CONTROL: ::std::os::raw::c_uint = 7;
pub const _SC_SAVED_IDS: ::std::os::raw::c_uint = 8;
pub const _SC_REALTIME_SIGNALS: ::std::os::raw::c_uint = 9;
pub const _SC_PRIORITY_SCHEDULING: ::std::os::raw::c_uint = 10;
pub const _SC_TIMERS: ::std::os::raw::c_uint = 11;
pub const _SC_ASYNCHRONOUS_IO: ::std::os::raw::c_uint = 12;
pub const _SC_PRIORITIZED_IO: ::std::os::raw::c_uint = 13;
pub const _SC_SYNCHRONIZED_IO: ::std::os::raw::c_uint = 14;
pub const _SC_FSYNC: ::std::os::raw::c_uint = 15;
pub const _SC_MAPPED_FILES: ::std::os::raw::c_uint = 16;
pub const _SC_MEMLOCK: ::std::os::raw::c_uint = 17;
pub const _SC_MEMLOCK_RANGE: ::std::os::raw::c_uint = 18;
pub const _SC_MEMORY_PROTECTION: ::std::os::raw::c_uint = 19;
pub const _SC_MESSAGE_PASSING: ::std::os::raw::c_uint = 20;
pub const _SC_SEMAPHORES: ::std::os::raw::c_uint = 21;
pub const _SC_SHARED_MEMORY_OBJECTS: ::std::os::raw::c_uint = 22;
pub const _SC_AIO_LISTIO_MAX: ::std::os::raw::c_uint = 23;
pub const _SC_AIO_MAX: ::std::os::raw::c_uint = 24;
pub const _SC_AIO_PRIO_DELTA_MAX: ::std::os::raw::c_uint = 25;
pub const _SC_DELAYTIMER_MAX: ::std::os::raw::c_uint = 26;
pub const _SC_MQ_OPEN_MAX: ::std::os::raw::c_uint = 27;
pub const _SC_MQ_PRIO_MAX: ::std::os::raw::c_uint = 28;
pub const _SC_VERSION: ::std::os::raw::c_uint = 29;
pub const _SC_PAGESIZE: ::std::os::raw::c_uint = 30;
pub const _SC_RTSIG_MAX: ::std::os::raw::c_uint = 31;
pub const _SC_SEM_NSEMS_MAX: ::std::os::raw::c_uint = 32;
pub const _SC_SEM_VALUE_MAX: ::std::os::raw::c_uint = 33;
pub const _SC_SIGQUEUE_MAX: ::std::os::raw::c_uint = 34;
pub const _SC_TIMER_MAX: ::std::os::raw::c_uint = 35;
pub const _SC_BC_BASE_MAX: ::std::os::raw::c_uint = 36;
pub const _SC_BC_DIM_MAX: ::std::os::raw::c_uint = 37;
pub const _SC_BC_SCALE_MAX: ::std::os::raw::c_uint = 38;
pub const _SC_BC_STRING_MAX: ::std::os::raw::c_uint = 39;
pub const _SC_COLL_WEIGHTS_MAX: ::std::os::raw::c_uint = 40;
pub const _SC_EQUIV_CLASS_MAX: ::std::os::raw::c_uint = 41;
pub const _SC_EXPR_NEST_MAX: ::std::os::raw::c_uint = 42;
pub const _SC_LINE_MAX: ::std::os::raw::c_uint = 43;
pub const _SC_RE_DUP_MAX: ::std::os::raw::c_uint = 44;
pub const _SC_CHARCLASS_NAME_MAX: ::std::os::raw::c_uint = 45;
pub const _SC_2_VERSION: ::std::os::raw::c_uint = 46;
pub const _SC_2_C_BIND: ::std::os::raw::c_uint = 47;
pub const _SC_2_C_DEV: ::std::os::raw::c_uint = 48;
pub const _SC_2_FORT_DEV: ::std::os::raw::c_uint = 49;
pub const _SC_2_FORT_RUN: ::std::os::raw::c_uint = 50;
pub const _SC_2_SW_DEV: ::std::os::raw::c_uint = 51;
pub const _SC_2_LOCALEDEF: ::std::os::raw::c_uint = 52;
pub const _SC_PII: ::std::os::raw::c_uint = 53;
pub const _SC_PII_XTI: ::std::os::raw::c_uint = 54;
pub const _SC_PII_SOCKET: ::std::os::raw::c_uint = 55;
pub const _SC_PII_INTERNET: ::std::os::raw::c_uint = 56;
pub const _SC_PII_OSI: ::std::os::raw::c_uint = 57;
pub const _SC_POLL: ::std::os::raw::c_uint = 58;
pub const _SC_SELECT: ::std::os::raw::c_uint = 59;
pub const _SC_UIO_MAXIOV: ::std::os::raw::c_uint = 60;
pub const _SC_IOV_MAX: ::std::os::raw::c_uint = 60;
pub const _SC_PII_INTERNET_STREAM: ::std::os::raw::c_uint = 61;
pub const _SC_PII_INTERNET_DGRAM: ::std::os::raw::c_uint = 62;
pub const _SC_PII_OSI_COTS: ::std::os::raw::c_uint = 63;
pub const _SC_PII_OSI_CLTS: ::std::os::raw::c_uint = 64;
pub const _SC_PII_OSI_M: ::std::os::raw::c_uint = 65;
pub const _SC_T_IOV_MAX: ::std::os::raw::c_uint = 66;
pub const _SC_THREADS: ::std::os::raw::c_uint = 67;
pub const _SC_THREAD_SAFE_FUNCTIONS: ::std::os::raw::c_uint = 68;
pub const _SC_GETGR_R_SIZE_MAX: ::std::os::raw::c_uint = 69;
pub const _SC_GETPW_R_SIZE_MAX: ::std::os::raw::c_uint = 70;
pub const _SC_LOGIN_NAME_MAX: ::std::os::raw::c_uint = 71;
pub const _SC_TTY_NAME_MAX: ::std::os::raw::c_uint = 72;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: ::std::os::raw::c_uint = 73;
pub const _SC_THREAD_KEYS_MAX: ::std::os::raw::c_uint = 74;
pub const _SC_THREAD_STACK_MIN: ::std::os::raw::c_uint = 75;
pub const _SC_THREAD_THREADS_MAX: ::std::os::raw::c_uint = 76;
pub const _SC_THREAD_ATTR_STACKADDR: ::std::os::raw::c_uint = 77;
pub const _SC_THREAD_ATTR_STACKSIZE: ::std::os::raw::c_uint = 78;
pub const _SC_THREAD_PRIORITY_SCHEDULING: ::std::os::raw::c_uint = 79;
pub const _SC_THREAD_PRIO_INHERIT: ::std::os::raw::c_uint = 80;
pub const _SC_THREAD_PRIO_PROTECT: ::std::os::raw::c_uint = 81;
pub const _SC_THREAD_PROCESS_SHARED: ::std::os::raw::c_uint = 82;
pub const _SC_NPROCESSORS_CONF: ::std::os::raw::c_uint = 83;
pub const _SC_NPROCESSORS_ONLN: ::std::os::raw::c_uint = 84;
pub const _SC_PHYS_PAGES: ::std::os::raw::c_uint = 85;
pub const _SC_AVPHYS_PAGES: ::std::os::raw::c_uint = 86;
pub const _SC_ATEXIT_MAX: ::std::os::raw::c_uint = 87;
pub const _SC_PASS_MAX: ::std::os::raw::c_uint = 88;
pub const _SC_XOPEN_VERSION: ::std::os::raw::c_uint = 89;
pub const _SC_XOPEN_XCU_VERSION: ::std::os::raw::c_uint = 90;
pub const _SC_XOPEN_UNIX: ::std::os::raw::c_uint = 91;
pub const _SC_XOPEN_CRYPT: ::std::os::raw::c_uint = 92;
pub const _SC_XOPEN_ENH_I18N: ::std::os::raw::c_uint = 93;
pub const _SC_XOPEN_SHM: ::std::os::raw::c_uint = 94;
pub const _SC_2_CHAR_TERM: ::std::os::raw::c_uint = 95;
pub const _SC_2_C_VERSION: ::std::os::raw::c_uint = 96;
pub const _SC_2_UPE: ::std::os::raw::c_uint = 97;
pub const _SC_XOPEN_XPG2: ::std::os::raw::c_uint = 98;
pub const _SC_XOPEN_XPG3: ::std::os::raw::c_uint = 99;
pub const _SC_XOPEN_XPG4: ::std::os::raw::c_uint = 100;
pub const _SC_CHAR_BIT: ::std::os::raw::c_uint = 101;
pub const _SC_CHAR_MAX: ::std::os::raw::c_uint = 102;
pub const _SC_CHAR_MIN: ::std::os::raw::c_uint = 103;
pub const _SC_INT_MAX: ::std::os::raw::c_uint = 104;
pub const _SC_INT_MIN: ::std::os::raw::c_uint = 105;
pub const _SC_LONG_BIT: ::std::os::raw::c_uint = 106;
pub const _SC_WORD_BIT: ::std::os::raw::c_uint = 107;
pub const _SC_MB_LEN_MAX: ::std::os::raw::c_uint = 108;
pub const _SC_NZERO: ::std::os::raw::c_uint = 109;
pub const _SC_SSIZE_MAX: ::std::os::raw::c_uint = 110;
pub const _SC_SCHAR_MAX: ::std::os::raw::c_uint = 111;
pub const _SC_SCHAR_MIN: ::std::os::raw::c_uint = 112;
pub const _SC_SHRT_MAX: ::std::os::raw::c_uint = 113;
pub const _SC_SHRT_MIN: ::std::os::raw::c_uint = 114;
pub const _SC_UCHAR_MAX: ::std::os::raw::c_uint = 115;
pub const _SC_UINT_MAX: ::std::os::raw::c_uint = 116;
pub const _SC_ULONG_MAX: ::std::os::raw::c_uint = 117;
pub const _SC_USHRT_MAX: ::std::os::raw::c_uint = 118;
pub const _SC_NL_ARGMAX: ::std::os::raw::c_uint = 119;
pub const _SC_NL_LANGMAX: ::std::os::raw::c_uint = 120;
pub const _SC_NL_MSGMAX: ::std::os::raw::c_uint = 121;
pub const _SC_NL_NMAX: ::std::os::raw::c_uint = 122;
pub const _SC_NL_SETMAX: ::std::os::raw::c_uint = 123;
pub const _SC_NL_TEXTMAX: ::std::os::raw::c_uint = 124;
pub const _SC_XBS5_ILP32_OFF32: ::std::os::raw::c_uint = 125;
pub const _SC_XBS5_ILP32_OFFBIG: ::std::os::raw::c_uint = 126;
pub const _SC_XBS5_LP64_OFF64: ::std::os::raw::c_uint = 127;
pub const _SC_XBS5_LPBIG_OFFBIG: ::std::os::raw::c_uint = 128;
pub const _SC_XOPEN_LEGACY: ::std::os::raw::c_uint = 129;
pub const _SC_XOPEN_REALTIME: ::std::os::raw::c_uint = 130;
pub const _SC_XOPEN_REALTIME_THREADS: ::std::os::raw::c_uint = 131;
pub const _SC_ADVISORY_INFO: ::std::os::raw::c_uint = 132;
pub const _SC_BARRIERS: ::std::os::raw::c_uint = 133;
pub const _SC_BASE: ::std::os::raw::c_uint = 134;
pub const _SC_C_LANG_SUPPORT: ::std::os::raw::c_uint = 135;
pub const _SC_C_LANG_SUPPORT_R: ::std::os::raw::c_uint = 136;
pub const _SC_CLOCK_SELECTION: ::std::os::raw::c_uint = 137;
pub const _SC_CPUTIME: ::std::os::raw::c_uint = 138;
pub const _SC_THREAD_CPUTIME: ::std::os::raw::c_uint = 139;
pub const _SC_DEVICE_IO: ::std::os::raw::c_uint = 140;
pub const _SC_DEVICE_SPECIFIC: ::std::os::raw::c_uint = 141;
pub const _SC_DEVICE_SPECIFIC_R: ::std::os::raw::c_uint = 142;
pub const _SC_FD_MGMT: ::std::os::raw::c_uint = 143;
pub const _SC_FIFO: ::std::os::raw::c_uint = 144;
pub const _SC_PIPE: ::std::os::raw::c_uint = 145;
pub const _SC_FILE_ATTRIBUTES: ::std::os::raw::c_uint = 146;
pub const _SC_FILE_LOCKING: ::std::os::raw::c_uint = 147;
pub const _SC_FILE_SYSTEM: ::std::os::raw::c_uint = 148;
pub const _SC_MONOTONIC_CLOCK: ::std::os::raw::c_uint = 149;
pub const _SC_MULTI_PROCESS: ::std::os::raw::c_uint = 150;
pub const _SC_SINGLE_PROCESS: ::std::os::raw::c_uint = 151;
pub const _SC_NETWORKING: ::std::os::raw::c_uint = 152;
pub const _SC_READER_WRITER_LOCKS: ::std::os::raw::c_uint = 153;
pub const _SC_SPIN_LOCKS: ::std::os::raw::c_uint = 154;
pub const _SC_REGEXP: ::std::os::raw::c_uint = 155;
pub const _SC_REGEX_VERSION: ::std::os::raw::c_uint = 156;
pub const _SC_SHELL: ::std::os::raw::c_uint = 157;
pub const _SC_SIGNALS: ::std::os::raw::c_uint = 158;
pub const _SC_SPAWN: ::std::os::raw::c_uint = 159;
pub const _SC_SPORADIC_SERVER: ::std::os::raw::c_uint = 160;
pub const _SC_THREAD_SPORADIC_SERVER: ::std::os::raw::c_uint = 161;
pub const _SC_SYSTEM_DATABASE: ::std::os::raw::c_uint = 162;
pub const _SC_SYSTEM_DATABASE_R: ::std::os::raw::c_uint = 163;
pub const _SC_TIMEOUTS: ::std::os::raw::c_uint = 164;
pub const _SC_TYPED_MEMORY_OBJECTS: ::std::os::raw::c_uint = 165;
pub const _SC_USER_GROUPS: ::std::os::raw::c_uint = 166;
pub const _SC_USER_GROUPS_R: ::std::os::raw::c_uint = 167;
pub const _SC_2_PBS: ::std::os::raw::c_uint = 168;
pub const _SC_2_PBS_ACCOUNTING: ::std::os::raw::c_uint = 169;
pub const _SC_2_PBS_LOCATE: ::std::os::raw::c_uint = 170;
pub const _SC_2_PBS_MESSAGE: ::std::os::raw::c_uint = 171;
pub const _SC_2_PBS_TRACK: ::std::os::raw::c_uint = 172;
pub const _SC_SYMLOOP_MAX: ::std::os::raw::c_uint = 173;
pub const _SC_STREAMS: ::std::os::raw::c_uint = 174;
pub const _SC_2_PBS_CHECKPOINT: ::std::os::raw::c_uint = 175;
pub const _SC_V6_ILP32_OFF32: ::std::os::raw::c_uint = 176;
pub const _SC_V6_ILP32_OFFBIG: ::std::os::raw::c_uint = 177;
pub const _SC_V6_LP64_OFF64: ::std::os::raw::c_uint = 178;
pub const _SC_V6_LPBIG_OFFBIG: ::std::os::raw::c_uint = 179;
pub const _SC_HOST_NAME_MAX: ::std::os::raw::c_uint = 180;
pub const _SC_TRACE: ::std::os::raw::c_uint = 181;
pub const _SC_TRACE_EVENT_FILTER: ::std::os::raw::c_uint = 182;
pub const _SC_TRACE_INHERIT: ::std::os::raw::c_uint = 183;
pub const _SC_TRACE_LOG: ::std::os::raw::c_uint = 184;
pub const _SC_LEVEL1_ICACHE_SIZE: ::std::os::raw::c_uint = 185;
pub const _SC_LEVEL1_ICACHE_ASSOC: ::std::os::raw::c_uint = 186;
pub const _SC_LEVEL1_ICACHE_LINESIZE: ::std::os::raw::c_uint = 187;
pub const _SC_LEVEL1_DCACHE_SIZE: ::std::os::raw::c_uint = 188;
pub const _SC_LEVEL1_DCACHE_ASSOC: ::std::os::raw::c_uint = 189;
pub const _SC_LEVEL1_DCACHE_LINESIZE: ::std::os::raw::c_uint = 190;
pub const _SC_LEVEL2_CACHE_SIZE: ::std::os::raw::c_uint = 191;
pub const _SC_LEVEL2_CACHE_ASSOC: ::std::os::raw::c_uint = 192;
pub const _SC_LEVEL2_CACHE_LINESIZE: ::std::os::raw::c_uint = 193;
pub const _SC_LEVEL3_CACHE_SIZE: ::std::os::raw::c_uint = 194;
pub const _SC_LEVEL3_CACHE_ASSOC: ::std::os::raw::c_uint = 195;
pub const _SC_LEVEL3_CACHE_LINESIZE: ::std::os::raw::c_uint = 196;
pub const _SC_LEVEL4_CACHE_SIZE: ::std::os::raw::c_uint = 197;
pub const _SC_LEVEL4_CACHE_ASSOC: ::std::os::raw::c_uint = 198;
pub const _SC_LEVEL4_CACHE_LINESIZE: ::std::os::raw::c_uint = 199;
pub const _SC_IPV6: ::std::os::raw::c_uint = 235;
pub const _SC_RAW_SOCKETS: ::std::os::raw::c_uint = 236;
pub const _SC_V7_ILP32_OFF32: ::std::os::raw::c_uint = 237;
pub const _SC_V7_ILP32_OFFBIG: ::std::os::raw::c_uint = 238;
pub const _SC_V7_LP64_OFF64: ::std::os::raw::c_uint = 239;
pub const _SC_V7_LPBIG_OFFBIG: ::std::os::raw::c_uint = 240;
pub const _SC_SS_REPL_MAX: ::std::os::raw::c_uint = 241;
pub const _SC_TRACE_EVENT_NAME_MAX: ::std::os::raw::c_uint = 242;
pub const _SC_TRACE_NAME_MAX: ::std::os::raw::c_uint = 243;
pub const _SC_TRACE_SYS_MAX: ::std::os::raw::c_uint = 244;
pub const _SC_TRACE_USER_EVENT_MAX: ::std::os::raw::c_uint = 245;
pub const _SC_XOPEN_STREAMS: ::std::os::raw::c_uint = 246;
pub const _SC_THREAD_ROBUST_PRIO_INHERIT: ::std::os::raw::c_uint = 247;
pub const _SC_THREAD_ROBUST_PRIO_PROTECT: ::std::os::raw::c_uint = 248;
pub const _SC_MINSIGSTKSZ: ::std::os::raw::c_uint = 249;
pub const _SC_SIGSTKSZ: ::std::os::raw::c_uint = 250;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub const _CS_PATH: ::std::os::raw::c_uint = 0;
pub const _CS_V6_WIDTH_RESTRICTED_ENVS: ::std::os::raw::c_uint = 1;
pub const _CS_GNU_LIBC_VERSION: ::std::os::raw::c_uint = 2;
pub const _CS_GNU_LIBPTHREAD_VERSION: ::std::os::raw::c_uint = 3;
pub const _CS_V5_WIDTH_RESTRICTED_ENVS: ::std::os::raw::c_uint = 4;
pub const _CS_V7_WIDTH_RESTRICTED_ENVS: ::std::os::raw::c_uint = 5;
pub const _CS_LFS_CFLAGS: ::std::os::raw::c_uint = 1000;
pub const _CS_LFS_LDFLAGS: ::std::os::raw::c_uint = 1001;
pub const _CS_LFS_LIBS: ::std::os::raw::c_uint = 1002;
pub const _CS_LFS_LINTFLAGS: ::std::os::raw::c_uint = 1003;
pub const _CS_LFS64_CFLAGS: ::std::os::raw::c_uint = 1004;
pub const _CS_LFS64_LDFLAGS: ::std::os::raw::c_uint = 1005;
pub const _CS_LFS64_LIBS: ::std::os::raw::c_uint = 1006;
pub const _CS_LFS64_LINTFLAGS: ::std::os::raw::c_uint = 1007;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: ::std::os::raw::c_uint = 1100;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: ::std::os::raw::c_uint = 1101;
pub const _CS_XBS5_ILP32_OFF32_LIBS: ::std::os::raw::c_uint = 1102;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: ::std::os::raw::c_uint = 1103;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: ::std::os::raw::c_uint = 1104;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: ::std::os::raw::c_uint = 1105;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: ::std::os::raw::c_uint = 1106;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: ::std::os::raw::c_uint = 1107;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: ::std::os::raw::c_uint = 1108;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: ::std::os::raw::c_uint = 1109;
pub const _CS_XBS5_LP64_OFF64_LIBS: ::std::os::raw::c_uint = 1110;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: ::std::os::raw::c_uint = 1111;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: ::std::os::raw::c_uint = 1112;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: ::std::os::raw::c_uint = 1113;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: ::std::os::raw::c_uint = 1114;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: ::std::os::raw::c_uint = 1115;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: ::std::os::raw::c_uint = 1116;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: ::std::os::raw::c_uint = 1117;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: ::std::os::raw::c_uint = 1118;
pub const _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: ::std::os::raw::c_uint = 1119;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: ::std::os::raw::c_uint = 1120;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: ::std::os::raw::c_uint = 1121;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: ::std::os::raw::c_uint = 1122;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: ::std::os::raw::c_uint = 1123;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: ::std::os::raw::c_uint = 1124;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: ::std::os::raw::c_uint = 1125;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: ::std::os::raw::c_uint = 1126;
pub const _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: ::std::os::raw::c_uint = 1127;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: ::std::os::raw::c_uint = 1128;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: ::std::os::raw::c_uint = 1129;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: ::std::os::raw::c_uint = 1130;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: ::std::os::raw::c_uint = 1131;
pub const _CS_POSIX_V7_ILP32_OFF32_CFLAGS: ::std::os::raw::c_uint = 1132;
pub const _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: ::std::os::raw::c_uint = 1133;
pub const _CS_POSIX_V7_ILP32_OFF32_LIBS: ::std::os::raw::c_uint = 1134;
pub const _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: ::std::os::raw::c_uint = 1135;
pub const _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: ::std::os::raw::c_uint = 1136;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: ::std::os::raw::c_uint = 1137;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LIBS: ::std::os::raw::c_uint = 1138;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: ::std::os::raw::c_uint = 1139;
pub const _CS_POSIX_V7_LP64_OFF64_CFLAGS: ::std::os::raw::c_uint = 1140;
pub const _CS_POSIX_V7_LP64_OFF64_LDFLAGS: ::std::os::raw::c_uint = 1141;
pub const _CS_POSIX_V7_LP64_OFF64_LIBS: ::std::os::raw::c_uint = 1142;
pub const _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: ::std::os::raw::c_uint = 1143;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: ::std::os::raw::c_uint = 1144;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: ::std::os::raw::c_uint = 1145;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: ::std::os::raw::c_uint = 1146;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: ::std::os::raw::c_uint = 1147;
pub const _CS_V6_ENV: ::std::os::raw::c_uint = 1148;
pub const _CS_V7_ENV: ::std::os::raw::c_uint = 1149;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
extern "C" {
    pub fn pathconf(
        __path: *const ::std::os::raw::c_char,
        __name: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fpathconf(
        __fd: ::std::os::raw::c_int,
        __name: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sysconf(__name: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn confstr(
        __name: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn getpid() -> __pid_t;
}
extern "C" {
    pub fn getppid() -> __pid_t;
}
extern "C" {
    pub fn getpgrp() -> __pid_t;
}
extern "C" {
    pub fn __getpgid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn getpgid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn setpgid(__pid: __pid_t, __pgid: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpgrp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsid() -> __pid_t;
}
extern "C" {
    pub fn getsid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn getuid() -> __uid_t;
}
extern "C" {
    pub fn geteuid() -> __uid_t;
}
extern "C" {
    pub fn getgid() -> __gid_t;
}
extern "C" {
    pub fn getegid() -> __gid_t;
}
extern "C" {
    pub fn getgroups(__size: ::std::os::raw::c_int, __list: *mut __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setreuid(__ruid: __uid_t, __euid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seteuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setregid(__rgid: __gid_t, __egid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setegid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fork() -> __pid_t;
}
extern "C" {
    pub fn vfork() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyname(__fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ttyname_r(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isatty(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyslot() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn link(
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn linkat(
        __fromfd: ::std::os::raw::c_int,
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symlink(
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlink(
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn symlinkat(
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlinkat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn unlink(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlinkat(
        __fd: ::std::os::raw::c_int,
        __name: *const ::std::os::raw::c_char,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcgetpgrp(__fd: ::std::os::raw::c_int) -> __pid_t;
}
extern "C" {
    pub fn tcsetpgrp(__fd: ::std::os::raw::c_int, __pgrp_id: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getlogin() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getlogin_r(
        __name: *mut ::std::os::raw::c_char,
        __name_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setlogin(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut optind: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut opterr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optopt: ::std::os::raw::c_int;
}
extern "C" {
    pub fn getopt(
        ___argc: ::std::os::raw::c_int,
        ___argv: *const *mut ::std::os::raw::c_char,
        __shortopts: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostname(__name: *mut ::std::os::raw::c_char, __len: size_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostname(
        __name: *const ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostid(__id: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdomainname(
        __name: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setdomainname(
        __name: *const ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vhangup() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn revoke(__file: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn profil(
        __sample_buffer: *mut ::std::os::raw::c_ushort,
        __size: size_t,
        __offset: size_t,
        __scale: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acct(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getusershell() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn endusershell();
}
extern "C" {
    pub fn setusershell();
}
extern "C" {
    pub fn daemon(
        __nochdir: ::std::os::raw::c_int,
        __noclose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chroot(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpass(__prompt: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fsync(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostid() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sync();
}
extern "C" {
    pub fn getpagesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdtablesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn truncate(
        __file: *const ::std::os::raw::c_char,
        __length: __off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftruncate(__fd: ::std::os::raw::c_int, __length: __off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn brk(__addr: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sbrk(__delta: isize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn syscall(__sysno: ::std::os::raw::c_long, ...) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lockf(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        __len: __off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdatasync(__fildes: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypt(
        __key: *const ::std::os::raw::c_char,
        __salt: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getentropy(
        __buffer: *mut ::std::os::raw::c_void,
        __length: size_t,
    ) -> ::std::os::raw::c_int;
}
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[test]
fn bindgen_test_layout_itimerspec() {
    assert_eq!(
        ::std::mem::size_of::<itimerspec>(),
        32usize,
        concat!("Size of: ", stringify!(itimerspec))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerspec>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerspec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerspec>())).it_interval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerspec>())).it_value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__locales as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_b as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_tolower as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_toupper as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__names as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
extern "C" {
    pub fn mktime(__tp: *mut DateTime) -> time_t;
}
extern "C" {
    pub fn strftime(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: size_t,
        __format: *const ::std::os::raw::c_char,
        __tp: *const DateTime,
    ) -> size_t;
}
extern "C" {
    pub fn strftime_l(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: size_t,
        __format: *const ::std::os::raw::c_char,
        __tp: *const DateTime,
        __loc: locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut DateTime;
}
extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut DateTime;
}
extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut DateTime) -> *mut DateTime;
}
extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut DateTime) -> *mut DateTime;
}
extern "C" {
    pub fn asctime(__tp: *const DateTime) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asctime_r(
        __tp: *const DateTime,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(
        __timer: *const time_t,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub static mut __daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub fn timegm(__tp: *mut DateTime) -> time_t;
}
extern "C" {
    pub fn timelocal(__tp: *mut DateTime) -> time_t;
}
extern "C" {
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nanosleep(
        __requested_time: *const timespec,
        __remaining: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_nanosleep(
        __clock_id: clockid_t,
        __flags: ::std::os::raw::c_int,
        __req: *const timespec,
        __rem: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_create(
        __clock_id: clockid_t,
        __evp: *mut sigevent,
        __timerid: *mut timer_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_settime(
        __timerid: timer_t,
        __flags: ::std::os::raw::c_int,
        __value: *const itimerspec,
        __ovalue: *mut itimerspec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(
        __ts: *mut timespec,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type byte = u8;
pub type word = u16;
pub type longword = u32;
pub type pbyte = *mut byte;
pub type pword = *mut word;
pub type S7Object = usize;
/// 日期和时间结构
#[repr(C, packed)]
#[derive(Debug, Copy, Clone, Default)]
pub struct DateTime {
    /// 秒 – 取值区间为[0,59]
    pub tm_sec: ::std::os::raw::c_int,
    /// 分 - 取值区间为[0,59]
    pub tm_min: ::std::os::raw::c_int,
    /// 时 - 取值区间为[0,23]
    pub tm_hour: ::std::os::raw::c_int,
    /// 一个月中的日期 - 取值区间为[1,31]
    pub tm_mday: ::std::os::raw::c_int,
    /// 月份（从一月开始，0代表一月） - 取值区间为[0,11]
    pub tm_mon: ::std::os::raw::c_int,
    /// 年份，其值等于实际年份减去1900
    pub tm_year: ::std::os::raw::c_int,
    /// 星期 – 取值区间为[0,6]，其中0代表星期天，1代表星期一，以此类推
    pub tm_wday: ::std::os::raw::c_int,
    /// 从每年的1月1日开始的天数 – 取值区间为[0,365]，其中0代表1月1日，1代表1月2日，以此类推
    pub tm_yday: ::std::os::raw::c_int,
    /// 夏令时标识符，实行夏令时的时候，tm_isdst 为正。不实行夏令时的时候，tm_isdst 为 0。不确定时为负
    pub tm_isdst: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_tm() {
    assert_eq!(
        ::std::mem::size_of::<DateTime>(),
        36usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<DateTime>(),
        1usize,
        concat!("Alignment of ", stringify!(tm))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DateTime>())).tm_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DateTime>())).tm_min as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DateTime>())).tm_hour as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DateTime>())).tm_mday as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DateTime>())).tm_mon as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DateTime>())).tm_year as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DateTime>())).tm_wday as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_wday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DateTime>())).tm_yday as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_yday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DateTime>())).tm_isdst as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_isdst)
        )
    );
}
pub type bool_ = ::std::os::raw::c_int;
pub const errLibInvalidParam: ::std::os::raw::c_int = -1;
pub const errLibInvalidObject: ::std::os::raw::c_int = -2;
pub const errIsoConnect: longword = 65536;
pub const errIsoDisconnect: longword = 131072;
pub const errIsoInvalidPDU: longword = 196608;
pub const errIsoInvalidDataSize: longword = 262144;
pub const errIsoNullPointer: longword = 327680;
pub const errIsoShortPacket: longword = 393216;
pub const errIsoTooManyFragments: longword = 458752;
pub const errIsoPduOverflow: longword = 524288;
pub const errIsoSendPacket: longword = 589824;
pub const errIsoRecvPacket: longword = 655360;
pub const errIsoInvalidParams: longword = 720896;
pub const errIsoResvd_1: longword = 786432;
pub const errIsoResvd_2: longword = 851968;
pub const errIsoResvd_3: longword = 917504;
pub const errIsoResvd_4: longword = 983040;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct TS7Tag {
    pub Area: ::std::os::raw::c_int,
    pub DBNumber: ::std::os::raw::c_int,
    pub Start: ::std::os::raw::c_int,
    pub Size: ::std::os::raw::c_int,
    pub WordLen: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_TS7Tag() {
    assert_eq!(
        ::std::mem::size_of::<TS7Tag>(),
        20usize,
        concat!("Size of: ", stringify!(TS7Tag))
    );
    assert_eq!(
        ::std::mem::align_of::<TS7Tag>(),
        1usize,
        concat!("Alignment of ", stringify!(TS7Tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7Tag>())).Area as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7Tag),
            "::",
            stringify!(Area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7Tag>())).DBNumber as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7Tag),
            "::",
            stringify!(DBNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7Tag>())).Start as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7Tag),
            "::",
            stringify!(Start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7Tag>())).Size as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7Tag),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7Tag>())).WordLen as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7Tag),
            "::",
            stringify!(WordLen)
        )
    );
}
pub type PS7Tag = *mut TS7Tag;
pub const p_u16_LocalPort: ::std::os::raw::c_int = 1;
pub const p_u16_RemotePort: ::std::os::raw::c_int = 2;
pub const p_i32_PingTimeout: ::std::os::raw::c_int = 3;
pub const p_i32_SendTimeout: ::std::os::raw::c_int = 4;
pub const p_i32_RecvTimeout: ::std::os::raw::c_int = 5;
pub const p_i32_WorkInterval: ::std::os::raw::c_int = 6;
pub const p_u16_SrcRef: ::std::os::raw::c_int = 7;
pub const p_u16_DstRef: ::std::os::raw::c_int = 8;
pub const p_u16_SrcTSap: ::std::os::raw::c_int = 9;
pub const p_i32_PDURequest: ::std::os::raw::c_int = 10;
pub const p_i32_MaxClients: ::std::os::raw::c_int = 11;
pub const p_i32_BSendTimeout: ::std::os::raw::c_int = 12;
pub const p_i32_BRecvTimeout: ::std::os::raw::c_int = 13;
pub const p_u32_RecoveryTime: ::std::os::raw::c_int = 14;
pub const p_u32_KeepAliveTime: ::std::os::raw::c_int = 15;
pub const JobComplete: ::std::os::raw::c_int = 0;
pub const JobPending: ::std::os::raw::c_int = 1;
pub const errNegotiatingPDU: longword = 1048576;
pub const errCliInvalidParams: longword = 2097152;
pub const errCliJobPending: longword = 3145728;
pub const errCliTooManyItems: longword = 4194304;
pub const errCliInvalidWordLen: longword = 5242880;
pub const errCliPartialDataWritten: longword = 6291456;
pub const errCliSizeOverPDU: longword = 7340032;
pub const errCliInvalidPlcAnswer: longword = 8388608;
pub const errCliAddressOutOfRange: longword = 9437184;
pub const errCliInvalidTransportSize: longword = 10485760;
pub const errCliWriteDataSizeMismatch: longword = 11534336;
pub const errCliItemNotAvailable: longword = 12582912;
pub const errCliInvalidValue: longword = 13631488;
pub const errCliCannotStartPLC: longword = 14680064;
pub const errCliAlreadyRun: longword = 15728640;
pub const errCliCannotStopPLC: longword = 16777216;
pub const errCliCannotCopyRamToRom: longword = 17825792;
pub const errCliCannotCompress: longword = 18874368;
pub const errCliAlreadyStop: longword = 19922944;
pub const errCliFunNotAvailable: longword = 20971520;
pub const errCliUploadSequenceFailed: longword = 22020096;
pub const errCliInvalidDataSizeRecvd: longword = 23068672;
pub const errCliInvalidBlockType: longword = 24117248;
pub const errCliInvalidBlockNumber: longword = 25165824;
pub const errCliInvalidBlockSize: longword = 26214400;
pub const errCliDownloadSequenceFailed: longword = 27262976;
pub const errCliInsertRefused: longword = 28311552;
pub const errCliDeleteRefused: longword = 29360128;
pub const errCliNeedPassword: longword = 30408704;
pub const errCliInvalidPassword: longword = 31457280;
pub const errCliNoPasswordToSetOrClear: longword = 32505856;
pub const errCliJobTimeout: longword = 33554432;
pub const errCliPartialDataRead: longword = 34603008;
pub const errCliBufferTooSmall: longword = 35651584;
pub const errCliFunctionRefused: longword = 36700160;
pub const errCliDestroying: longword = 37748736;
pub const errCliInvalidParamNumber: longword = 38797312;
pub const errCliCannotChangeParam: longword = 39845888;
pub const MaxVars: ::std::os::raw::c_int = 20;
pub const CONNTYPE_PG: word = 1;
pub const CONNTYPE_OP: word = 2;
pub const CONNTYPE_BASIC: word = 3;
pub const S7AreaPE: byte = 129;
pub const S7AreaPA: byte = 130;
pub const S7AreaMK: byte = 131;
pub const S7AreaDB: byte = 132;
pub const S7AreaCT: byte = 28;
pub const S7AreaTM: byte = 29;
pub const S7WLBit: ::std::os::raw::c_int = 1;
pub const S7WLByte: ::std::os::raw::c_int = 2;
pub const S7WLWord: ::std::os::raw::c_int = 4;
pub const S7WLDWord: ::std::os::raw::c_int = 6;
pub const S7WLReal: ::std::os::raw::c_int = 8;
pub const S7WLCounter: ::std::os::raw::c_int = 28;
pub const S7WLTimer: ::std::os::raw::c_int = 29;
pub const Block_OB: byte = 56;
pub const Block_DB: byte = 65;
pub const Block_SDB: byte = 66;
pub const Block_FC: byte = 67;
pub const Block_SFC: byte = 68;
pub const Block_FB: byte = 69;
pub const Block_SFB: byte = 70;
pub const SubBlk_OB: byte = 8;
pub const SubBlk_DB: byte = 10;
pub const SubBlk_SDB: byte = 11;
pub const SubBlk_FC: byte = 12;
pub const SubBlk_SFC: byte = 13;
pub const SubBlk_FB: byte = 14;
pub const SubBlk_SFB: byte = 15;
pub const BlockLangAWL: byte = 1;
pub const BlockLangKOP: byte = 2;
pub const BlockLangFUP: byte = 3;
pub const BlockLangSCL: byte = 4;
pub const BlockLangDB: byte = 5;
pub const BlockLangGRAPH: byte = 6;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct TS7DataItem {
    pub Area: ::std::os::raw::c_int,
    pub WordLen: ::std::os::raw::c_int,
    pub Result: ::std::os::raw::c_int,
    pub DBNumber: ::std::os::raw::c_int,
    pub Start: ::std::os::raw::c_int,
    pub Amount: ::std::os::raw::c_int,
    pub pdata: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_TS7DataItem() {
    assert_eq!(
        ::std::mem::size_of::<TS7DataItem>(),
        32usize,
        concat!("Size of: ", stringify!(TS7DataItem))
    );
    assert_eq!(
        ::std::mem::align_of::<TS7DataItem>(),
        1usize,
        concat!("Alignment of ", stringify!(TS7DataItem))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7DataItem>())).Area as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7DataItem),
            "::",
            stringify!(Area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7DataItem>())).WordLen as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7DataItem),
            "::",
            stringify!(WordLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7DataItem>())).Result as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7DataItem),
            "::",
            stringify!(Result)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7DataItem>())).DBNumber as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7DataItem),
            "::",
            stringify!(DBNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7DataItem>())).Start as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7DataItem),
            "::",
            stringify!(Start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7DataItem>())).Amount as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7DataItem),
            "::",
            stringify!(Amount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7DataItem>())).pdata as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7DataItem),
            "::",
            stringify!(pdata)
        )
    );
}
pub type PS7DataItem = *mut TS7DataItem;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone, Default)]
pub struct TS7BlocksList {
    pub OBCount: ::std::os::raw::c_int,
    pub FBCount: ::std::os::raw::c_int,
    pub FCCount: ::std::os::raw::c_int,
    pub SFBCount: ::std::os::raw::c_int,
    pub SFCCount: ::std::os::raw::c_int,
    pub DBCount: ::std::os::raw::c_int,
    pub SDBCount: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_TS7BlocksList() {
    assert_eq!(
        ::std::mem::size_of::<TS7BlocksList>(),
        28usize,
        concat!("Size of: ", stringify!(TS7BlocksList))
    );
    assert_eq!(
        ::std::mem::align_of::<TS7BlocksList>(),
        1usize,
        concat!("Alignment of ", stringify!(TS7BlocksList))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7BlocksList>())).OBCount as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7BlocksList),
            "::",
            stringify!(OBCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7BlocksList>())).FBCount as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7BlocksList),
            "::",
            stringify!(FBCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7BlocksList>())).FCCount as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7BlocksList),
            "::",
            stringify!(FCCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7BlocksList>())).SFBCount as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7BlocksList),
            "::",
            stringify!(SFBCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7BlocksList>())).SFCCount as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7BlocksList),
            "::",
            stringify!(SFCCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7BlocksList>())).DBCount as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7BlocksList),
            "::",
            stringify!(DBCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7BlocksList>())).SDBCount as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7BlocksList),
            "::",
            stringify!(SDBCount)
        )
    );
}
pub type PS7BlocksList = *mut TS7BlocksList;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct TS7BlockInfo {
    pub BlkType: ::std::os::raw::c_int,
    pub BlkNumber: ::std::os::raw::c_int,
    pub BlkLang: ::std::os::raw::c_int,
    pub BlkFlags: ::std::os::raw::c_int,
    pub MC7Size: ::std::os::raw::c_int,
    pub LoadSize: ::std::os::raw::c_int,
    pub LocalData: ::std::os::raw::c_int,
    pub SBBLength: ::std::os::raw::c_int,
    pub CheckSum: ::std::os::raw::c_int,
    pub Version: ::std::os::raw::c_int,
    pub CodeDate: [::std::os::raw::c_char; 11usize],
    pub IntfDate: [::std::os::raw::c_char; 11usize],
    pub Author: [::std::os::raw::c_char; 9usize],
    pub Family: [::std::os::raw::c_char; 9usize],
    pub Header: [::std::os::raw::c_char; 9usize],
}
#[test]
fn bindgen_test_layout_TS7BlockInfo() {
    assert_eq!(
        ::std::mem::size_of::<TS7BlockInfo>(),
        89usize,
        concat!("Size of: ", stringify!(TS7BlockInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<TS7BlockInfo>(),
        1usize,
        concat!("Alignment of ", stringify!(TS7BlockInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7BlockInfo>())).BlkType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7BlockInfo),
            "::",
            stringify!(BlkType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7BlockInfo>())).BlkNumber as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7BlockInfo),
            "::",
            stringify!(BlkNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7BlockInfo>())).BlkLang as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7BlockInfo),
            "::",
            stringify!(BlkLang)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7BlockInfo>())).BlkFlags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7BlockInfo),
            "::",
            stringify!(BlkFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7BlockInfo>())).MC7Size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7BlockInfo),
            "::",
            stringify!(MC7Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7BlockInfo>())).LoadSize as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7BlockInfo),
            "::",
            stringify!(LoadSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7BlockInfo>())).LocalData as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7BlockInfo),
            "::",
            stringify!(LocalData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7BlockInfo>())).SBBLength as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7BlockInfo),
            "::",
            stringify!(SBBLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7BlockInfo>())).CheckSum as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7BlockInfo),
            "::",
            stringify!(CheckSum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7BlockInfo>())).Version as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7BlockInfo),
            "::",
            stringify!(Version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7BlockInfo>())).CodeDate as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7BlockInfo),
            "::",
            stringify!(CodeDate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7BlockInfo>())).IntfDate as *const _ as usize },
        51usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7BlockInfo),
            "::",
            stringify!(IntfDate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7BlockInfo>())).Author as *const _ as usize },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7BlockInfo),
            "::",
            stringify!(Author)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7BlockInfo>())).Family as *const _ as usize },
        71usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7BlockInfo),
            "::",
            stringify!(Family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7BlockInfo>())).Header as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7BlockInfo),
            "::",
            stringify!(Header)
        )
    );
}
pub type PS7BlockInfo = *mut TS7BlockInfo;
pub type TS7BlocksOfType = [word; 8192usize];
pub type PS7BlocksOfType = *mut TS7BlocksOfType;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TS7OrderCode {
    pub Code: [::std::os::raw::c_char; 21usize],
    pub V1: byte,
    pub V2: byte,
    pub V3: byte,
}
#[test]
fn bindgen_test_layout_TS7OrderCode() {
    assert_eq!(
        ::std::mem::size_of::<TS7OrderCode>(),
        24usize,
        concat!("Size of: ", stringify!(TS7OrderCode))
    );
    assert_eq!(
        ::std::mem::align_of::<TS7OrderCode>(),
        1usize,
        concat!("Alignment of ", stringify!(TS7OrderCode))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7OrderCode>())).Code as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7OrderCode),
            "::",
            stringify!(Code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7OrderCode>())).V1 as *const _ as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7OrderCode),
            "::",
            stringify!(V1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7OrderCode>())).V2 as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7OrderCode),
            "::",
            stringify!(V2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7OrderCode>())).V3 as *const _ as usize },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7OrderCode),
            "::",
            stringify!(V3)
        )
    );
}
pub type PS7OrderCode = *mut TS7OrderCode;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TS7CpuInfo {
    pub ModuleTypeName: [::std::os::raw::c_char; 33usize],
    pub SerialNumber: [::std::os::raw::c_char; 25usize],
    pub ASName: [::std::os::raw::c_char; 25usize],
    pub Copyright: [::std::os::raw::c_char; 27usize],
    pub ModuleName: [::std::os::raw::c_char; 25usize],
}
#[test]
fn bindgen_test_layout_TS7CpuInfo() {
    assert_eq!(
        ::std::mem::size_of::<TS7CpuInfo>(),
        135usize,
        concat!("Size of: ", stringify!(TS7CpuInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<TS7CpuInfo>(),
        1usize,
        concat!("Alignment of ", stringify!(TS7CpuInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7CpuInfo>())).ModuleTypeName as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7CpuInfo),
            "::",
            stringify!(ModuleTypeName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7CpuInfo>())).SerialNumber as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7CpuInfo),
            "::",
            stringify!(SerialNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7CpuInfo>())).ASName as *const _ as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7CpuInfo),
            "::",
            stringify!(ASName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7CpuInfo>())).Copyright as *const _ as usize },
        83usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7CpuInfo),
            "::",
            stringify!(Copyright)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7CpuInfo>())).ModuleName as *const _ as usize },
        110usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7CpuInfo),
            "::",
            stringify!(ModuleName)
        )
    );
}
pub type PS7CpuInfo = *mut TS7CpuInfo;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct TS7CpInfo {
    pub MaxPduLengt: ::std::os::raw::c_int,
    pub MaxConnections: ::std::os::raw::c_int,
    pub MaxMpiRate: ::std::os::raw::c_int,
    pub MaxBusRate: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_TS7CpInfo() {
    assert_eq!(
        ::std::mem::size_of::<TS7CpInfo>(),
        16usize,
        concat!("Size of: ", stringify!(TS7CpInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<TS7CpInfo>(),
        1usize,
        concat!("Alignment of ", stringify!(TS7CpInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7CpInfo>())).MaxPduLengt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7CpInfo),
            "::",
            stringify!(MaxPduLengt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7CpInfo>())).MaxConnections as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7CpInfo),
            "::",
            stringify!(MaxConnections)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7CpInfo>())).MaxMpiRate as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7CpInfo),
            "::",
            stringify!(MaxMpiRate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7CpInfo>())).MaxBusRate as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7CpInfo),
            "::",
            stringify!(MaxBusRate)
        )
    );
}
pub type PS7CpInfo = *mut TS7CpInfo;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SZL_HEADER {
    pub LENTHDR: word,
    pub N_DR: word,
}
#[test]
fn bindgen_test_layout_SZL_HEADER() {
    assert_eq!(
        ::std::mem::size_of::<SZL_HEADER>(),
        4usize,
        concat!("Size of: ", stringify!(SZL_HEADER))
    );
    assert_eq!(
        ::std::mem::align_of::<SZL_HEADER>(),
        1usize,
        concat!("Alignment of ", stringify!(SZL_HEADER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SZL_HEADER>())).LENTHDR as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SZL_HEADER),
            "::",
            stringify!(LENTHDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SZL_HEADER>())).N_DR as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(SZL_HEADER),
            "::",
            stringify!(N_DR)
        )
    );
}
pub type PSZL_HEADER = *mut SZL_HEADER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TS7SZL {
    pub Header: SZL_HEADER,
    pub Data: [byte; 16380usize],
}
#[test]
fn bindgen_test_layout_TS7SZL() {
    assert_eq!(
        ::std::mem::size_of::<TS7SZL>(),
        16384usize,
        concat!("Size of: ", stringify!(TS7SZL))
    );
    assert_eq!(
        ::std::mem::align_of::<TS7SZL>(),
        1usize,
        concat!("Alignment of ", stringify!(TS7SZL))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7SZL>())).Header as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7SZL),
            "::",
            stringify!(Header)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7SZL>())).Data as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7SZL),
            "::",
            stringify!(Data)
        )
    );
}
pub type PS7SZL = *mut TS7SZL;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct TS7SZLList {
    pub Header: SZL_HEADER,
    pub List: [word; 8190usize],
}
#[test]
fn bindgen_test_layout_TS7SZLList() {
    assert_eq!(
        ::std::mem::size_of::<TS7SZLList>(),
        16384usize,
        concat!("Size of: ", stringify!(TS7SZLList))
    );
    assert_eq!(
        ::std::mem::align_of::<TS7SZLList>(),
        1usize,
        concat!("Alignment of ", stringify!(TS7SZLList))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7SZLList>())).Header as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7SZLList),
            "::",
            stringify!(Header)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7SZLList>())).List as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7SZLList),
            "::",
            stringify!(List)
        )
    );
}
pub type PS7SZLList = *mut TS7SZLList;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct TS7Protection {
    pub sch_schal: word,
    pub sch_par: word,
    pub sch_rel: word,
    pub bart_sch: word,
    pub anl_sch: word,
}
#[test]
fn bindgen_test_layout_TS7Protection() {
    assert_eq!(
        ::std::mem::size_of::<TS7Protection>(),
        10usize,
        concat!("Size of: ", stringify!(TS7Protection))
    );
    assert_eq!(
        ::std::mem::align_of::<TS7Protection>(),
        1usize,
        concat!("Alignment of ", stringify!(TS7Protection))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7Protection>())).sch_schal as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7Protection),
            "::",
            stringify!(sch_schal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7Protection>())).sch_par as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7Protection),
            "::",
            stringify!(sch_par)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7Protection>())).sch_rel as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7Protection),
            "::",
            stringify!(sch_rel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7Protection>())).bart_sch as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7Protection),
            "::",
            stringify!(bart_sch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TS7Protection>())).anl_sch as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TS7Protection),
            "::",
            stringify!(anl_sch)
        )
    );
}
pub type PS7Protection = *mut TS7Protection;
pub type pfn_CliCompletion = ::std::option::Option<
    unsafe extern "C" fn(
        usrPtr: *mut ::std::os::raw::c_void,
        opCode: ::std::os::raw::c_int,
        opResult: ::std::os::raw::c_int,
    ),
>;
extern "C" {
    pub fn Cli_Create() -> S7Object;
}
extern "C" {
    pub fn Cli_Destroy(Client: *mut S7Object);
}
extern "C" {
    pub fn Cli_ConnectTo(
        Client: S7Object,
        Address: *const ::std::os::raw::c_char,
        Rack: ::std::os::raw::c_int,
        Slot: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_SetConnectionParams(
        Client: S7Object,
        Address: *const ::std::os::raw::c_char,
        LocalTSAP: word,
        RemoteTSAP: word,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_SetConnectionType(Client: S7Object, ConnectionType: word) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_Connect(Client: S7Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_Disconnect(Client: S7Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_GetParam(
        Client: S7Object,
        ParamNumber: ::std::os::raw::c_int,
        pValue: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_SetParam(
        Client: S7Object,
        ParamNumber: ::std::os::raw::c_int,
        pValue: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_SetAsCallback(
        Client: S7Object,
        pCompletion: pfn_CliCompletion,
        usrPtr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_ReadArea(
        Client: S7Object,
        Area: ::std::os::raw::c_int,
        DBNumber: ::std::os::raw::c_int,
        Start: ::std::os::raw::c_int,
        Amount: ::std::os::raw::c_int,
        WordLen: ::std::os::raw::c_int,
        pUsrData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_WriteArea(
        Client: S7Object,
        Area: ::std::os::raw::c_int,
        DBNumber: ::std::os::raw::c_int,
        Start: ::std::os::raw::c_int,
        Amount: ::std::os::raw::c_int,
        WordLen: ::std::os::raw::c_int,
        pUsrData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_ReadMultiVars(
        Client: S7Object,
        Item: PS7DataItem,
        ItemsCount: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_WriteMultiVars(
        Client: S7Object,
        Item: PS7DataItem,
        ItemsCount: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_DBRead(
        Client: S7Object,
        DBNumber: ::std::os::raw::c_int,
        Start: ::std::os::raw::c_int,
        Size: ::std::os::raw::c_int,
        pUsrData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_DBWrite(
        Client: S7Object,
        DBNumber: ::std::os::raw::c_int,
        Start: ::std::os::raw::c_int,
        Size: ::std::os::raw::c_int,
        pUsrData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_MBRead(
        Client: S7Object,
        Start: ::std::os::raw::c_int,
        Size: ::std::os::raw::c_int,
        pUsrData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_MBWrite(
        Client: S7Object,
        Start: ::std::os::raw::c_int,
        Size: ::std::os::raw::c_int,
        pUsrData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_EBRead(
        Client: S7Object,
        Start: ::std::os::raw::c_int,
        Size: ::std::os::raw::c_int,
        pUsrData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_EBWrite(
        Client: S7Object,
        Start: ::std::os::raw::c_int,
        Size: ::std::os::raw::c_int,
        pUsrData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_ABRead(
        Client: S7Object,
        Start: ::std::os::raw::c_int,
        Size: ::std::os::raw::c_int,
        pUsrData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_ABWrite(
        Client: S7Object,
        Start: ::std::os::raw::c_int,
        Size: ::std::os::raw::c_int,
        pUsrData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_TMRead(
        Client: S7Object,
        Start: ::std::os::raw::c_int,
        Amount: ::std::os::raw::c_int,
        pUsrData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_TMWrite(
        Client: S7Object,
        Start: ::std::os::raw::c_int,
        Amount: ::std::os::raw::c_int,
        pUsrData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_CTRead(
        Client: S7Object,
        Start: ::std::os::raw::c_int,
        Amount: ::std::os::raw::c_int,
        pUsrData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_CTWrite(
        Client: S7Object,
        Start: ::std::os::raw::c_int,
        Amount: ::std::os::raw::c_int,
        pUsrData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_ListBlocks(Client: S7Object, pUsrData: *mut TS7BlocksList) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_GetAgBlockInfo(
        Client: S7Object,
        BlockType: ::std::os::raw::c_int,
        BlockNum: ::std::os::raw::c_int,
        pUsrData: *mut TS7BlockInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_GetPgBlockInfo(
        Client: S7Object,
        pBlock: *mut ::std::os::raw::c_void,
        pUsrData: *mut TS7BlockInfo,
        Size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_ListBlocksOfType(
        Client: S7Object,
        BlockType: ::std::os::raw::c_int,
        pUsrData: *mut TS7BlocksOfType,
        ItemsCount: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_Upload(
        Client: S7Object,
        BlockType: ::std::os::raw::c_int,
        BlockNum: ::std::os::raw::c_int,
        pUsrData: *mut ::std::os::raw::c_void,
        Size: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_FullUpload(
        Client: S7Object,
        BlockType: ::std::os::raw::c_int,
        BlockNum: ::std::os::raw::c_int,
        pUsrData: *mut ::std::os::raw::c_void,
        Size: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_Download(
        Client: S7Object,
        BlockNum: ::std::os::raw::c_int,
        pUsrData: *mut ::std::os::raw::c_void,
        Size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_Delete(
        Client: S7Object,
        BlockType: ::std::os::raw::c_int,
        BlockNum: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_DBGet(
        Client: S7Object,
        DBNumber: ::std::os::raw::c_int,
        pUsrData: *mut ::std::os::raw::c_void,
        Size: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_DBFill(
        Client: S7Object,
        DBNumber: ::std::os::raw::c_int,
        FillChar: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_GetPlcDateTime(Client: S7Object, DateTime: *mut DateTime) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_SetPlcDateTime(Client: S7Object, DateTime: *mut DateTime) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_SetPlcSystemDateTime(Client: S7Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_GetOrderCode(Client: S7Object, pUsrData: *mut TS7OrderCode)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_GetCpuInfo(Client: S7Object, pUsrData: *mut TS7CpuInfo) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_GetCpInfo(Client: S7Object, pUsrData: *mut TS7CpInfo) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_ReadSZL(
        Client: S7Object,
        ID: ::std::os::raw::c_int,
        Index: ::std::os::raw::c_int,
        pUsrData: *mut TS7SZL,
        Size: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_ReadSZLList(
        Client: S7Object,
        pUsrData: *mut TS7SZLList,
        ItemsCount: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_PlcHotStart(Client: S7Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_PlcColdStart(Client: S7Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_PlcStop(Client: S7Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_CopyRamToRom(
        Client: S7Object,
        Timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_Compress(Client: S7Object, Timeout: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_GetPlcStatus(
        Client: S7Object,
        Status: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_GetProtection(
        Client: S7Object,
        pUsrData: *mut TS7Protection,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_SetSessionPassword(
        Client: S7Object,
        Password: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_ClearSessionPassword(Client: S7Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_IsoExchangeBuffer(
        Client: S7Object,
        pUsrData: *mut ::std::os::raw::c_void,
        Size: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_GetExecTime(
        Client: S7Object,
        Time: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_GetLastError(
        Client: S7Object,
        LastError: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_GetPduLength(
        Client: S7Object,
        Requested: *mut ::std::os::raw::c_int,
        Negotiated: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_ErrorText(
        Error: ::std::os::raw::c_int,
        Text: *mut ::std::os::raw::c_char,
        TextLen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_GetConnected(
        Client: S7Object,
        Connected: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_AsReadArea(
        Client: S7Object,
        Area: ::std::os::raw::c_int,
        DBNumber: ::std::os::raw::c_int,
        Start: ::std::os::raw::c_int,
        Amount: ::std::os::raw::c_int,
        WordLen: ::std::os::raw::c_int,
        pUsrData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_AsWriteArea(
        Client: S7Object,
        Area: ::std::os::raw::c_int,
        DBNumber: ::std::os::raw::c_int,
        Start: ::std::os::raw::c_int,
        Amount: ::std::os::raw::c_int,
        WordLen: ::std::os::raw::c_int,
        pUsrData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_AsDBRead(
        Client: S7Object,
        DBNumber: ::std::os::raw::c_int,
        Start: ::std::os::raw::c_int,
        Size: ::std::os::raw::c_int,
        pUsrData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_AsDBWrite(
        Client: S7Object,
        DBNumber: ::std::os::raw::c_int,
        Start: ::std::os::raw::c_int,
        Size: ::std::os::raw::c_int,
        pUsrData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_AsMBRead(
        Client: S7Object,
        Start: ::std::os::raw::c_int,
        Size: ::std::os::raw::c_int,
        pUsrData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_AsMBWrite(
        Client: S7Object,
        Start: ::std::os::raw::c_int,
        Size: ::std::os::raw::c_int,
        pUsrData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_AsEBRead(
        Client: S7Object,
        Start: ::std::os::raw::c_int,
        Size: ::std::os::raw::c_int,
        pUsrData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_AsEBWrite(
        Client: S7Object,
        Start: ::std::os::raw::c_int,
        Size: ::std::os::raw::c_int,
        pUsrData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_AsABRead(
        Client: S7Object,
        Start: ::std::os::raw::c_int,
        Size: ::std::os::raw::c_int,
        pUsrData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_AsABWrite(
        Client: S7Object,
        Start: ::std::os::raw::c_int,
        Size: ::std::os::raw::c_int,
        pUsrData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_AsTMRead(
        Client: S7Object,
        Start: ::std::os::raw::c_int,
        Amount: ::std::os::raw::c_int,
        pUsrData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_AsTMWrite(
        Client: S7Object,
        Start: ::std::os::raw::c_int,
        Amount: ::std::os::raw::c_int,
        pUsrData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_AsCTRead(
        Client: S7Object,
        Start: ::std::os::raw::c_int,
        Amount: ::std::os::raw::c_int,
        pUsrData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_AsCTWrite(
        Client: S7Object,
        Start: ::std::os::raw::c_int,
        Amount: ::std::os::raw::c_int,
        pUsrData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_AsListBlocksOfType(
        Client: S7Object,
        BlockType: ::std::os::raw::c_int,
        pUsrData: *mut TS7BlocksOfType,
        ItemsCount: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_AsReadSZL(
        Client: S7Object,
        ID: ::std::os::raw::c_int,
        Index: ::std::os::raw::c_int,
        pUsrData: *mut TS7SZL,
        Size: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_AsReadSZLList(
        Client: S7Object,
        pUsrData: *mut TS7SZLList,
        ItemsCount: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_AsUpload(
        Client: S7Object,
        BlockType: ::std::os::raw::c_int,
        BlockNum: ::std::os::raw::c_int,
        pUsrData: *mut ::std::os::raw::c_void,
        Size: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_AsFullUpload(
        Client: S7Object,
        BlockType: ::std::os::raw::c_int,
        BlockNum: ::std::os::raw::c_int,
        pUsrData: *mut ::std::os::raw::c_void,
        Size: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_AsDownload(
        Client: S7Object,
        BlockNum: ::std::os::raw::c_int,
        pUsrData: *mut ::std::os::raw::c_void,
        Size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_AsCopyRamToRom(
        Client: S7Object,
        Timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_AsCompress(
        Client: S7Object,
        Timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_AsDBGet(
        Client: S7Object,
        DBNumber: ::std::os::raw::c_int,
        pUsrData: *mut ::std::os::raw::c_void,
        Size: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_AsDBFill(
        Client: S7Object,
        DBNumber: ::std::os::raw::c_int,
        FillChar: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_CheckAsCompletion(
        Client: S7Object,
        opResult: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cli_WaitAsCompletion(
        Client: S7Object,
        Timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const OperationRead: ::std::os::raw::c_int = 0;
pub const OperationWrite: ::std::os::raw::c_int = 1;
pub const mkEvent: ::std::os::raw::c_int = 0;
pub const mkLog: ::std::os::raw::c_int = 1;
pub const srvAreaPE: ::std::os::raw::c_int = 0;
pub const srvAreaPA: ::std::os::raw::c_int = 1;
pub const srvAreaMK: ::std::os::raw::c_int = 2;
pub const srvAreaCT: ::std::os::raw::c_int = 3;
pub const srvAreaTM: ::std::os::raw::c_int = 4;
pub const srvAreaDB: ::std::os::raw::c_int = 5;
pub const errSrvCannotStart: longword = 1048576;
pub const errSrvDBNullPointer: longword = 2097152;
pub const errSrvAreaAlreadyExists: longword = 3145728;
pub const errSrvUnknownArea: longword = 4194304;
pub const errSrvInvalidParams: longword = 5242880;
pub const errSrvTooManyDB: longword = 6291456;
pub const errSrvInvalidParamNumber: longword = 7340032;
pub const errSrvCannotChangeParam: longword = 8388608;
pub const evcServerStarted: longword = 1;
pub const evcServerStopped: longword = 2;
pub const evcListenerCannotStart: longword = 4;
pub const evcClientAdded: longword = 8;
pub const evcClientRejected: longword = 16;
pub const evcClientNoRoom: longword = 32;
pub const evcClientException: longword = 64;
pub const evcClientDisconnected: longword = 128;
pub const evcClientTerminated: longword = 256;
pub const evcClientsDropped: longword = 512;
pub const evcReserved_00000400: longword = 1024;
pub const evcReserved_00000800: longword = 2048;
pub const evcReserved_00001000: longword = 4096;
pub const evcReserved_00002000: longword = 8192;
pub const evcReserved_00004000: longword = 16384;
pub const evcReserved_00008000: longword = 32768;
pub const evcPDUincoming: longword = 65536;
pub const evcDataRead: longword = 131072;
pub const evcDataWrite: longword = 262144;
pub const evcNegotiatePDU: longword = 524288;
pub const evcReadSZL: longword = 1048576;
pub const evcClock: longword = 2097152;
pub const evcUpload: longword = 4194304;
pub const evcDownload: longword = 8388608;
pub const evcDirectory: longword = 16777216;
pub const evcSecurity: longword = 33554432;
pub const evcControl: longword = 67108864;
pub const evcReserved_08000000: longword = 134217728;
pub const evcReserved_10000000: longword = 268435456;
pub const evcReserved_20000000: longword = 536870912;
pub const evcReserved_40000000: longword = 1073741824;
pub const evcReserved_80000000: longword = 2147483648;
pub const evcAll: longword = 4294967295;
pub const evcNone: longword = 0;
pub const evsUnknown: word = 0;
pub const evsStartUpload: word = 1;
pub const evsStartDownload: word = 1;
pub const evsGetBlockList: word = 1;
pub const evsStartListBoT: word = 2;
pub const evsListBoT: word = 3;
pub const evsGetBlockInfo: word = 4;
pub const evsGetClock: word = 1;
pub const evsSetClock: word = 2;
pub const evsSetPassword: word = 1;
pub const evsClrPassword: word = 2;
pub const grProgrammer: word = 65;
pub const grCyclicData: word = 66;
pub const grBlocksInfo: word = 67;
pub const grSZL: word = 68;
pub const grPassword: word = 69;
pub const grBSend: word = 70;
pub const grClock: word = 71;
pub const grSecurity: word = 69;
pub const CodeControlUnknown: word = 0;
pub const CodeControlColdStart: word = 1;
pub const CodeControlWarmStart: word = 2;
pub const CodeControlStop: word = 3;
pub const CodeControlCompress: word = 4;
pub const CodeControlCpyRamRom: word = 5;
pub const CodeControlInsDel: word = 6;
pub const evrNoError: word = 0;
pub const evrFragmentRejected: word = 1;
pub const evrMalformedPDU: word = 2;
pub const evrSparseBytes: word = 3;
pub const evrCannotHandlePDU: word = 4;
pub const evrNotImplemented: word = 5;
pub const evrErrException: word = 6;
pub const evrErrAreaNotFound: word = 7;
pub const evrErrOutOfRange: word = 8;
pub const evrErrOverPDU: word = 9;
pub const evrErrTransportSize: word = 10;
pub const evrInvalidGroupUData: word = 11;
pub const evrInvalidSZL: word = 12;
pub const evrDataSizeMismatch: word = 13;
pub const evrCannotUpload: word = 14;
pub const evrCannotDownload: word = 15;
pub const evrUploadInvalidID: word = 16;
pub const evrResNotFound: word = 17;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone, Default)]
pub struct TSrvEvent {
    pub EvtTime: time_t,
    pub EvtSender: ::std::os::raw::c_int,
    pub EvtCode: longword,
    pub EvtRetCode: word,
    pub EvtParam1: word,
    pub EvtParam2: word,
    pub EvtParam3: word,
    pub EvtParam4: word,
}
#[test]
fn bindgen_test_layout_TSrvEvent() {
    assert_eq!(
        ::std::mem::size_of::<TSrvEvent>(),
        26usize,
        concat!("Size of: ", stringify!(TSrvEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<TSrvEvent>(),
        1usize,
        concat!("Alignment of ", stringify!(TSrvEvent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSrvEvent>())).EvtTime as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TSrvEvent),
            "::",
            stringify!(EvtTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSrvEvent>())).EvtSender as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TSrvEvent),
            "::",
            stringify!(EvtSender)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSrvEvent>())).EvtCode as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TSrvEvent),
            "::",
            stringify!(EvtCode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSrvEvent>())).EvtRetCode as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TSrvEvent),
            "::",
            stringify!(EvtRetCode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSrvEvent>())).EvtParam1 as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(TSrvEvent),
            "::",
            stringify!(EvtParam1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSrvEvent>())).EvtParam2 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(TSrvEvent),
            "::",
            stringify!(EvtParam2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSrvEvent>())).EvtParam3 as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(TSrvEvent),
            "::",
            stringify!(EvtParam3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSrvEvent>())).EvtParam4 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TSrvEvent),
            "::",
            stringify!(EvtParam4)
        )
    );
}
pub type PSrvEvent = *mut TSrvEvent;
pub type pfn_SrvCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        usrPtr: *mut ::std::os::raw::c_void,
        PEvent: PSrvEvent,
        Size: ::std::os::raw::c_int,
    ),
>;
pub type pfn_RWAreaCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        usrPtr: *mut ::std::os::raw::c_void,
        Sender: ::std::os::raw::c_int,
        Operation: ::std::os::raw::c_int,
        PTag: PS7Tag,
        pUsrData: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn Srv_Create() -> S7Object;
}
extern "C" {
    pub fn Srv_Destroy(Server: *mut S7Object);
}
extern "C" {
    pub fn Srv_GetParam(
        Server: S7Object,
        ParamNumber: ::std::os::raw::c_int,
        pValue: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Srv_SetParam(
        Server: S7Object,
        ParamNumber: ::std::os::raw::c_int,
        pValue: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Srv_StartTo(
        Server: S7Object,
        Address: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Srv_Start(Server: S7Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Srv_Stop(Server: S7Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Srv_RegisterArea(
        Server: S7Object,
        AreaCode: ::std::os::raw::c_int,
        Index: word,
        pUsrData: *mut ::std::os::raw::c_void,
        Size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Srv_UnregisterArea(
        Server: S7Object,
        AreaCode: ::std::os::raw::c_int,
        Index: word,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Srv_LockArea(
        Server: S7Object,
        AreaCode: ::std::os::raw::c_int,
        Index: word,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Srv_UnlockArea(
        Server: S7Object,
        AreaCode: ::std::os::raw::c_int,
        Index: word,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Srv_GetStatus(
        Server: S7Object,
        ServerStatus: *mut ::std::os::raw::c_int,
        CpuStatus: *mut ::std::os::raw::c_int,
        ClientsCount: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Srv_SetCpuStatus(
        Server: S7Object,
        CpuStatus: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Srv_ClearEvents(Server: S7Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Srv_PickEvent(
        Server: S7Object,
        pEvent: *mut TSrvEvent,
        EvtReady: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Srv_GetMask(
        Server: S7Object,
        MaskKind: ::std::os::raw::c_int,
        Mask: *mut longword,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Srv_SetMask(
        Server: S7Object,
        MaskKind: ::std::os::raw::c_int,
        Mask: longword,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Srv_SetEventsCallback(
        Server: S7Object,
        pCallback: pfn_SrvCallBack,
        usrPtr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Srv_SetReadEventsCallback(
        Server: S7Object,
        pCallback: pfn_SrvCallBack,
        usrPtr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Srv_SetRWAreaCallback(
        Server: S7Object,
        pCallback: pfn_RWAreaCallBack,
        usrPtr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Srv_EventText(
        Event: *mut TSrvEvent,
        Text: *mut ::std::os::raw::c_char,
        TextLen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Srv_ErrorText(
        Error: ::std::os::raw::c_int,
        Text: *mut ::std::os::raw::c_char,
        TextLen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const par_stopped: ::std::os::raw::c_int = 0;
pub const par_connecting: ::std::os::raw::c_int = 1;
pub const par_waiting: ::std::os::raw::c_int = 2;
pub const par_linked: ::std::os::raw::c_int = 3;
pub const par_sending: ::std::os::raw::c_int = 4;
pub const par_receiving: ::std::os::raw::c_int = 5;
pub const par_binderror: ::std::os::raw::c_int = 6;
pub const errParAddressInUse: longword = 2097152;
pub const errParNoRoom: longword = 3145728;
pub const errServerNoRoom: longword = 4194304;
pub const errParInvalidParams: longword = 5242880;
pub const errParNotLinked: longword = 6291456;
pub const errParBusy: longword = 7340032;
pub const errParFrameTimeout: longword = 8388608;
pub const errParInvalidPDU: longword = 9437184;
pub const errParSendTimeout: longword = 10485760;
pub const errParRecvTimeout: longword = 11534336;
pub const errParSendRefused: longword = 12582912;
pub const errParNegotiatingPDU: longword = 13631488;
pub const errParSendingBlock: longword = 14680064;
pub const errParRecvingBlock: longword = 15728640;
pub const errParBindError: longword = 16777216;
pub const errParDestroying: longword = 17825792;
pub const errParInvalidParamNumber: longword = 18874368;
pub const errParCannotChangeParam: longword = 19922944;
pub const errParBufferTooSmall: longword = 20971520;
pub type pfn_ParRecvCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        usrPtr: *mut ::std::os::raw::c_void,
        opResult: ::std::os::raw::c_int,
        R_ID: longword,
        pData: *mut ::std::os::raw::c_void,
        Size: ::std::os::raw::c_int,
    ),
>;
pub type pfn_ParSendCompletion = ::std::option::Option<
    unsafe extern "C" fn(usrPtr: *mut ::std::os::raw::c_void, opResult: ::std::os::raw::c_int),
>;
extern "C" {
    pub fn Par_Create(Active: ::std::os::raw::c_int) -> S7Object;
}
extern "C" {
    pub fn Par_Destroy(Partner: *mut S7Object);
}
extern "C" {
    pub fn Par_GetParam(
        Partner: S7Object,
        ParamNumber: ::std::os::raw::c_int,
        pValue: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Par_SetParam(
        Partner: S7Object,
        ParamNumber: ::std::os::raw::c_int,
        pValue: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Par_StartTo(
        Partner: S7Object,
        LocalAddress: *const ::std::os::raw::c_char,
        RemoteAddress: *const ::std::os::raw::c_char,
        LocTsap: word,
        RemTsap: word,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Par_Start(Partner: S7Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Par_Stop(Partner: S7Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Par_BSend(
        Partner: S7Object,
        R_ID: longword,
        pUsrData: *mut ::std::os::raw::c_void,
        Size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Par_AsBSend(
        Partner: S7Object,
        R_ID: longword,
        pUsrData: *mut ::std::os::raw::c_void,
        Size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Par_CheckAsBSendCompletion(
        Partner: S7Object,
        opResult: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Par_WaitAsBSendCompletion(Partner: S7Object, Timeout: longword)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Par_SetSendCallback(
        Partner: S7Object,
        pCompletion: pfn_ParSendCompletion,
        usrPtr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Par_BRecv(
        Partner: S7Object,
        R_ID: *mut longword,
        pData: *mut ::std::os::raw::c_void,
        Size: *mut ::std::os::raw::c_int,
        Timeout: longword,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Par_CheckAsBRecvCompletion(
        Partner: S7Object,
        opResult: *mut ::std::os::raw::c_int,
        R_ID: *mut longword,
        pData: *mut ::std::os::raw::c_void,
        Size: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Par_SetRecvCallback(
        Partner: S7Object,
        pCompletion: pfn_ParRecvCallBack,
        usrPtr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Par_GetTimes(
        Partner: S7Object,
        SendTime: *mut longword,
        RecvTime: *mut longword,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Par_GetStats(
        Partner: S7Object,
        BytesSent: *mut longword,
        BytesRecv: *mut longword,
        SendErrors: *mut longword,
        RecvErrors: *mut longword,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Par_GetLastError(
        Partner: S7Object,
        LastError: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Par_GetStatus(
        Partner: S7Object,
        Status: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Par_ErrorText(
        Error: ::std::os::raw::c_int,
        Text: *mut ::std::os::raw::c_char,
        TextLen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
